name: Build and Deploy GitHub Pages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - '_config.yml'
      - 'Gemfile*'
      - 'index.md'
      - '.lycheerc.toml'
      - '.github/workflows/pages.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Check internal links in built site
        uses: lycheeverse/lychee-action@v2
        with:
          args: --config .lycheerc.toml --verbose --no-progress --accept 200,301,302,403,404,429 _site/
          fail: false
          format: markdown
          output: build-time-link-check.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build-time link check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-time-link-check
          path: build-time-link-check.md
          retention-days: 7

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  link-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Check all documentation links
        uses: lycheeverse/lychee-action@v2
        with:
          args: |
            --config .lycheerc.toml -vvvv --format markdown
            https://etherisc-services.github.io/document-templating-service/
            https://etherisc-services.github.io/document-templating-service/docs/
            https://etherisc-services.github.io/document-templating-service/docs/installation.html
            https://etherisc-services.github.io/document-templating-service/docs/usage.html
            https://etherisc-services.github.io/document-templating-service/docs/api-endpoints.html
            https://etherisc-services.github.io/document-templating-service/docs/document-templates.html
            https://etherisc-services.github.io/document-templating-service/docs/error-handling.html
            https://etherisc-services.github.io/document-templating-service/docs/examples.html
            https://etherisc-services.github.io/document-templating-service/docs/image-support.html
            https://etherisc-services.github.io/document-templating-service/docs/integration.html
            https://etherisc-services.github.io/document-templating-service/docs/docx-linter.html
          fail: true
          format: markdown
          output: deployment-link-check.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload deployment link check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-link-check
          path: deployment-link-check.md
          retention-days: 7

      - name: Link check summary
        if: always()
        run: |
          echo "üîó Comprehensive link check completed!"
          echo "üìÑ Build-time check: 'build-time-link-check' artifact"
          echo "üìÑ Deployment check: 'deployment-link-check' artifact"
          echo ""
          echo "üìä Build-time Summary:"
          if [ -f build-time-link-check.md ]; then
            grep -E "üîç Total|‚úÖ Successful|üö´ Errors" build-time-link-check.md || echo "Build-time report not found"
          fi
          echo ""
          echo "üìä Deployment Summary:"
          if [ -f deployment-link-check.md ]; then
            grep -E "üîç Total|‚úÖ Successful|üö´ Errors" deployment-link-check.md || echo "Deployment report summary not available"
          fi 