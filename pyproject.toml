[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "document-templating-service"
version = "1.5.0"
description = "A FastAPI service for processing Word document templates with Jinja2 and converting to PDF"
authors = [{name = "Document Templating Service Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Office Suites",
]
dependencies = [
    "fastapi==0.115.6",
    "uvicorn[standard]==0.32.1",
    "aiofiles==24.1.0",
    "pydantic==2.10.3",
    "requests==2.32.3",
    "docxtpl==0.19.0",
    "python-docx==1.1.2",
    "jinja2==3.1.4",
    "lxml==5.3.0",
    "python-multipart==0.0.17",
    "python-dotenv==1.0.1",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-html>=4.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "requests>=2.31.0",
    "python-docx>=1.1.0",
    "Pillow>=10.0.0",
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/your-org/document-templating-service"
Documentation = "https://your-org.github.io/document-templating-service"
Repository = "https://github.com/your-org/document-templating-service.git"
Issues = "https://github.com/your-org/document-templating-service/issues"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | temp
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["services", "models"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "temp",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docxtpl.*",
    "docx.*",
    "aiofiles.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --tb=short"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = [".", "services", "models"]
omit = [
    "tests/*",
    "examples/*",
    "temp/*",
    ".venv/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]